import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# Bot Token
BOT_TOKEN = "7986275346:AAG_TBcb3qP151eNUs9DQ00mPO0hXxbnLV8"

# Required Channels
REQUIRED_CHANNELS = [
    "@jsbbsksna", "@kanvsujs",
    "@nabbjshbs", "@kshbbsks",
    "@kalaEarn", "@Earkaro618"
]

BONUS_PER_REFERRAL = 5
WITHDRAW_LIMIT = 50
user_data = {}

logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


def check_user_joined_all(bot, user_id) -> bool:
    for channel in REQUIRED_CHANNELS:
        try:
            status = bot.get_chat_member(chat_id=channel, user_id=user_id).status
            if status not in ['member', 'administrator', 'creator']:
                return False
        except:
            return False
    return True


def get_join_keyboard():
    keyboard = []
    for i in range(0, len(REQUIRED_CHANNELS), 2):
        row = []
        for ch in REQUIRED_CHANNELS[i:i + 2]:
            row.append(InlineKeyboardButton("ЁЯФЧ Join", url=f"https://t.me/{ch[1:]}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("тЬЕ IтАЩve Joined All", callback_data="joined")])
    return InlineKeyboardMarkup(keyboard)


def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ЁЯТ░ Balance", callback_data="balance"),
         InlineKeyboardButton("ЁЯТ│ Withdraw", callback_data="withdraw")],
        [InlineKeyboardButton("ЁЯФЧ Referral", callback_data="referral"),
         InlineKeyboardButton("ЁЯУШ How to Earn", callback_data="howto")]
    ])


def back_button():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ЁЯФЩ Back to Menu", callback_data="back")]
    ])


def start(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = user.id
    context.bot.send_message(
        chat_id=user_id,
        text="ЁЯУЫ рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕рднреА рдЪреИрдирд▓реЛрдВ рдХреЛ join рдХрд░реЗрдВ:",
        reply_markup=get_join_keyboard()
    )


def handle_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    query.answer()
    action = query.data

    if action == "joined":
        if check_user_joined_all(context.bot, user_id):
            if user_id not in user_data:
                user_data[user_id] = {"balance": 0, "referrals": []}

                # Referral Bonus Logic
                message = query.message
                if message and message.text and "/start" in message.text:
                    args = message.text.split()
                    if len(args) > 1 and args[1].isdigit():
                        ref_id = int(args[1])
                        if ref_id != user_id and ref_id in user_data:
                            if user_id not in user_data[ref_id]["referrals"]:
                                user_data[ref_id]["referrals"].append(user_id)
                                user_data[ref_id]["balance"] += BONUS_PER_REFERRAL
                                try:
                                    context.bot.send_message(
                                        chat_id=ref_id,
                                        text=f"ЁЯОЙ рдЖрдкрдиреЗ 1 referral рдкреВрд░рд╛ рдХрд┐рдпрд╛!\nтВ╣{BONUS_PER_REFERRAL} рдЖрдкрдХреЗ рд╡реЙрд▓реЗрдЯ рдореЗрдВ рдЬреЛрдбрд╝ рджрд┐рдП рдЧрдП рд╣реИрдВред"
                                    )
                                    # ЁЯОЙ Popup for referrer
                                    context.bot.send_message(
                                        chat_id=user_id,
                                        text="ЁЯОЙ Congratulations! Your referral was successful.\nтВ╣5 has been added to your wallet."
                                    )
                                except:
                                    pass

            # Main menu message
            keyboard = main_menu().inline_keyboard
            context.bot.send_message(
                chat_id=user_id,
                text="тЬЕ рдзрдиреНрдпрд╡рд╛рдж! рдЖрдкрдиреЗ рд╕рднреА рдЪреИрдирд▓ join рдХрд░ рд▓рд┐рдП рд╣реИрдВред рдЕрдм рдЖрдк earning рд╢реБрд░реВ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред\n\nAdd Channel : @ARMAN9012",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        else:
            query.edit_message_text("тЭМ рдЖрдкрдиреЗ рд╕рднреА рдЪреИрдирд▓ рдЬреЙрдЗрди рдирд╣реАрдВ рдХрд┐рдП рд╣реИрдВред рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рд╕рднреА рдХреЛ рдЬреЙрдЗрди рдХрд░реЗрдВред",
                                    reply_markup=get_join_keyboard())

    elif action in ["balance", "withdraw", "referral", "howto", "back"]:
        if not check_user_joined_all(context.bot, user_id):
            query.edit_message_text("тЪая╕П рдкрд╣рд▓реЗ рд╕рднреА рдЪреИрдирд▓ join рдХрд░реЗрдВ рддрднреА рдЖрдк earning рд╢реБрд░реВ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред",
                                    reply_markup=get_join_keyboard())
            return

        if user_id not in user_data:
            user_data[user_id] = {"balance": 0, "referrals": []}

        if action == "balance":
            bal = user_data[user_id]["balance"]
            query.edit_message_text(f"ЁЯТ░ рдЖрдкрдХреА рдмреИрд▓реЗрдВрд╕: тВ╣{bal}", reply_markup=back_button())

        elif action == "withdraw":
            if user_data[user_id]["balance"] >= WITHDRAW_LIMIT:
                user_data[user_id]["balance"] = 0
                query.edit_message_text("тЬЕ Withdrawal request рднреЗрдЬ рджреА рдЧрдИ рд╣реИ!", reply_markup=back_button())
            else:
                query.edit_message_text(
                    f"тЭМ тВ╣{WITHDRAW_LIMIT} рд╕реЗ рдХрдо рдмреИрд▓реЗрдВрд╕ рдкрд░ withdrawal рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ред",
                    reply_markup=back_button())

        elif action == "referral":
            ref_link = f"https://t.me/{context.bot.username}?start={user_id}"
            ref_count = len(user_data[user_id]["referrals"])
            total = ref_count * BONUS_PER_REFERRAL
            query.edit_message_text(
                f"ЁЯФЧ рдЖрдкрдХрд╛ referral link:\n{ref_link}\n\nЁЯСе Referrals: {ref_count}\nЁЯТ╕ Earnings: тВ╣{total}",
                reply_markup=back_button()
            )

        elif action == "howto":
            query.edit_message_text(
                "ЁЯУШ *рдХрдорд╛рдИ рдХреИрд╕реЗ рдХрд░реЗрдВ:*\n\n1. рдЕрдкрдирд╛ referral link рд╢реЗрдпрд░ рдХрд░реЗрдВред\n2. рдЬрдм рдХреЛрдИ рдирдпрд╛ user рд╕рднреА рдЪреИрдирд▓ join рдХрд░рдХреЗ рдмреЛрдЯ рд╕реНрдЯрд╛рд░реНрдЯ рдХрд░рддрд╛ рд╣реИ рддреЛ рдЖрдкрдХреЛ тВ╣5 рдорд┐рд▓рддреЗ рд╣реИрдВред\n3. тВ╣50 рд╣реЛрдиреЗ рдкрд░ withdrawal рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред",
                parse_mode="Markdown", reply_markup=back_button()
            )

        elif action == "back":
            query.edit_message_text("ЁЯПа рдореБрдЦреНрдп рдореЗрдиреВ", reply_markup=main_menu())


def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(handle_button))
    dp.add_error_handler(lambda u, c: logger.error(f"Error: {c.error}"))
    logger.info("тЬЕ Bot started...")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
